{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nexport const usePlaylist = (socket, idServer, idUser) => {\n  _s();\n  const [playedStatus, setStatus] = useState(true);\n  const [plalistInfo, setPlalistInfo] = useState({\n    songs: [],\n    currentPlayed: -1\n  });\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (idServer === -1) {\n          navigate('/error', {\n            state: {\n              title: 'Ошибка',\n              body: 'Вы скорее не выбрали сервер по которому хотите получить информацию пожалуйста выберите интересующий вас сервер.'\n            }\n          });\n        }\n        socket.emit('connectMe', {\n          idServer: idServer,\n          idUser: idUser\n        }, callback => {});\n        socket === null || socket === void 0 ? void 0 : socket.on('updatePlayed', status => {\n          setStatus(status);\n        });\n        socket === null || socket === void 0 ? void 0 : socket.emit('getAllInfo', {\n          id: idServer\n        });\n        socket === null || socket === void 0 ? void 0 : socket.on('updatePlaylist', ({\n          action,\n          song\n        }) => {\n          if (song === undefined) return;\n          if (action === 'allItems') {\n            socket === null || socket === void 0 ? void 0 : socket.emit('getCurrentStatus', {\n              id: idServer\n            }, callback => {\n              setStatus(callback);\n            });\n            setPlalistInfo(prevInfo => ({\n              ...prevInfo,\n              songs: song\n            }));\n            console.log('set new playlist', song);\n            socket === null || socket === void 0 ? void 0 : socket.emit('getCurrentPlayed', {\n              id: idServer\n            }, callback => {\n              setPlalistInfo(prevInfo => ({\n                ...prevInfo,\n                currentPlayed: callback\n              }));\n            });\n          } else if (action === 'newCurrentPlayed') {\n            setPlalistInfo(prevInfo => ({\n              ...prevInfo,\n              currentPlayed: song\n            }));\n          } else if (action === 'add') {\n            setPlalistInfo(prevInfo => ({\n              ...prevInfo,\n              songs: [...prevInfo.songs, song]\n            }));\n          } else if (action === 'remove') {\n            const remove = songs => {\n              const updatedSongs = [...songs];\n              if (song !== -1) {\n                updatedSongs.splice(song, 1);\n              }\n              return updatedSongs;\n            };\n            setPlalistInfo(prevInfo => ({\n              ...prevInfo,\n              songs: remove(prevInfo.songs)\n            }));\n          }\n        });\n      } catch (error) {\n        console.log('Error fetching data:', error);\n      }\n    };\n    fetchData();\n    return () => {\n      socket === null || socket === void 0 ? void 0 : socket.off('updatePlaylist');\n      socket === null || socket === void 0 ? void 0 : socket.off('updatePlayed');\n      socket === null || socket === void 0 ? void 0 : socket.close();\n    };\n  }, []);\n  return [playedStatus, plalistInfo];\n};\n_s(usePlaylist, \"iUMBCVdkUmzVo1fxf1ib1SXuiWA=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useEffect","useState","useNavigate","usePlaylist","socket","idServer","idUser","_s","playedStatus","setStatus","plalistInfo","setPlalistInfo","songs","currentPlayed","navigate","fetchData","state","title","body","emit","callback","on","status","id","action","song","undefined","prevInfo","console","log","remove","updatedSongs","splice","error","off","close"],"sources":["/home/maksb/Загрузки/170km/frontend/src/hooks/usePlaylist.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nexport const usePlaylist = (socket, idServer, idUser) => {\n\tconst [playedStatus, setStatus] = useState(true)\n\tconst [plalistInfo, setPlalistInfo] = useState({\n\t\tsongs: [],\n\t\tcurrentPlayed: -1,\n\t})\n\tconst navigate = useNavigate()\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tif (idServer === -1) {\n\t\t\t\t\tnavigate('/error', {\n\t\t\t\t\t\tstate: {\n\t\t\t\t\t\t\ttitle: 'Ошибка',\n\t\t\t\t\t\t\tbody: 'Вы скорее не выбрали сервер по которому хотите получить информацию пожалуйста выберите интересующий вас сервер.',\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tsocket.emit(\n\t\t\t\t\t'connectMe',\n\t\t\t\t\t{ idServer: idServer, idUser: idUser },\n\t\t\t\t\tcallback => {}\n\t\t\t\t)\n\n\t\t\t\tsocket?.on('updatePlayed', status => {\n\t\t\t\t\tsetStatus(status)\n\t\t\t\t})\n\n\t\t\t\tsocket?.emit('getAllInfo', { id: idServer })\n\t\t\t\tsocket?.on('updatePlaylist', ({ action, song }) => {\n\t\t\t\t\tif (song === undefined) return\n\n\t\t\t\t\tif (action === 'allItems') {\n\t\t\t\t\t\tsocket?.emit('getCurrentStatus', { id: idServer }, callback => {\n\t\t\t\t\t\t\tsetStatus(callback)\n\t\t\t\t\t\t})\n\t\t\t\t\t\tsetPlalistInfo(prevInfo => ({\n\t\t\t\t\t\t\t...prevInfo,\n\t\t\t\t\t\t\tsongs: song,\n\t\t\t\t\t\t}))\n\t\t\t\t\t\tconsole.log('set new playlist', song)\n\n\t\t\t\t\t\tsocket?.emit('getCurrentPlayed', { id: idServer }, callback => {\n\t\t\t\t\t\t\tsetPlalistInfo(prevInfo => ({\n\t\t\t\t\t\t\t\t...prevInfo,\n\t\t\t\t\t\t\t\tcurrentPlayed: callback,\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t})\n\t\t\t\t\t} else if (action === 'newCurrentPlayed') {\n\t\t\t\t\t\tsetPlalistInfo(prevInfo => ({\n\t\t\t\t\t\t\t...prevInfo,\n\t\t\t\t\t\t\tcurrentPlayed: song,\n\t\t\t\t\t\t}))\n\t\t\t\t\t} else if (action === 'add') {\n\t\t\t\t\t\tsetPlalistInfo(prevInfo => ({\n\t\t\t\t\t\t\t...prevInfo,\n\t\t\t\t\t\t\tsongs: [...prevInfo.songs, song],\n\t\t\t\t\t\t}))\n\t\t\t\t\t} else if (action === 'remove') {\n\t\t\t\t\t\tconst remove = songs => {\n\t\t\t\t\t\t\tconst updatedSongs = [...songs]\n\n\t\t\t\t\t\t\tif (song !== -1) {\n\t\t\t\t\t\t\t\tupdatedSongs.splice(song, 1)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn updatedSongs\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetPlalistInfo(prevInfo => ({\n\t\t\t\t\t\t\t...prevInfo,\n\t\t\t\t\t\t\tsongs: remove(prevInfo.songs),\n\t\t\t\t\t\t}))\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log('Error fetching data:', error)\n\t\t\t}\n\t\t}\n\n\t\tfetchData()\n\t\treturn () => {\n\t\t\tsocket?.off('updatePlaylist')\n\t\t\tsocket?.off('updatePlayed')\n\t\t\tsocket?.close()\n\t\t}\n\t}, [])\n\treturn [playedStatus, plalistInfo]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}