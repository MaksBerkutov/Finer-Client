{"ast":null,"code":"import{useEffect,useState}from'react';import{useNavigate}from'react-router-dom';export const usePlaylist=(socket,idServer,idUser)=>{const[playedStatus,setStatus]=useState(true);const[plalistInfo,setPlalistInfo]=useState({songs:[],currentPlayed:-1});const navigate=useNavigate();useEffect(()=>{const fetchData=async()=>{try{if(idServer===-1){navigate('/error',{state:{title:'Ошибка',body:'Вы скорее не выбрали сервер по которому хотите получить информацию пожалуйста выберите интересующий вас сервер.'}});}socket.emit('connectMe',{idServer:idServer,idUser:idUser},callback=>{});socket===null||socket===void 0?void 0:socket.on('updatePlayed',status=>{setStatus(status);});socket===null||socket===void 0?void 0:socket.emit('getAllInfo',{id:idServer});socket===null||socket===void 0?void 0:socket.on('updatePlaylist',_ref=>{let{action,song}=_ref;if(song===undefined)return;if(action==='allItems'){socket===null||socket===void 0?void 0:socket.emit('getCurrentStatus',{id:idServer},callback=>{setStatus(callback);});setPlalistInfo(prevInfo=>({...prevInfo,songs:song}));console.log('set new playlist',song);socket===null||socket===void 0?void 0:socket.emit('getCurrentPlayed',{id:idServer},callback=>{setPlalistInfo(prevInfo=>({...prevInfo,currentPlayed:callback}));});}else if(action==='newCurrentPlayed'){setPlalistInfo(prevInfo=>({...prevInfo,currentPlayed:song}));}else if(action==='add'){setPlalistInfo(prevInfo=>({...prevInfo,songs:[...prevInfo.songs,song]}));}else if(action==='remove'){const remove=songs=>{const updatedSongs=[...songs];if(song!==-1){updatedSongs.splice(song,1);}return updatedSongs;};setPlalistInfo(prevInfo=>({...prevInfo,songs:remove(prevInfo.songs)}));}});}catch(error){console.log('Error fetching data:',error);}};fetchData();return()=>{socket===null||socket===void 0?void 0:socket.off('updatePlaylist');socket===null||socket===void 0?void 0:socket.off('updatePlayed');socket===null||socket===void 0?void 0:socket.close();};},[]);return[playedStatus,plalistInfo];};","map":{"version":3,"names":["useEffect","useState","useNavigate","usePlaylist","socket","idServer","idUser","playedStatus","setStatus","plalistInfo","setPlalistInfo","songs","currentPlayed","navigate","fetchData","state","title","body","emit","callback","on","status","id","_ref","action","song","undefined","prevInfo","console","log","remove","updatedSongs","splice","error","off","close"],"sources":["/home/maksb/Загрузки/170km/frontend/src/hooks/usePlaylist.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nexport const usePlaylist = (socket, idServer, idUser) => {\n\tconst [playedStatus, setStatus] = useState(true)\n\tconst [plalistInfo, setPlalistInfo] = useState({\n\t\tsongs: [],\n\t\tcurrentPlayed: -1,\n\t})\n\tconst navigate = useNavigate()\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tif (idServer === -1) {\n\t\t\t\t\tnavigate('/error', {\n\t\t\t\t\t\tstate: {\n\t\t\t\t\t\t\ttitle: 'Ошибка',\n\t\t\t\t\t\t\tbody: 'Вы скорее не выбрали сервер по которому хотите получить информацию пожалуйста выберите интересующий вас сервер.',\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tsocket.emit(\n\t\t\t\t\t'connectMe',\n\t\t\t\t\t{ idServer: idServer, idUser: idUser },\n\t\t\t\t\tcallback => {}\n\t\t\t\t)\n\n\t\t\t\tsocket?.on('updatePlayed', status => {\n\t\t\t\t\tsetStatus(status)\n\t\t\t\t})\n\n\t\t\t\tsocket?.emit('getAllInfo', { id: idServer })\n\t\t\t\tsocket?.on('updatePlaylist', ({ action, song }) => {\n\t\t\t\t\tif (song === undefined) return\n\n\t\t\t\t\tif (action === 'allItems') {\n\t\t\t\t\t\tsocket?.emit('getCurrentStatus', { id: idServer }, callback => {\n\t\t\t\t\t\t\tsetStatus(callback)\n\t\t\t\t\t\t})\n\t\t\t\t\t\tsetPlalistInfo(prevInfo => ({\n\t\t\t\t\t\t\t...prevInfo,\n\t\t\t\t\t\t\tsongs: song,\n\t\t\t\t\t\t}))\n\t\t\t\t\t\tconsole.log('set new playlist', song)\n\n\t\t\t\t\t\tsocket?.emit('getCurrentPlayed', { id: idServer }, callback => {\n\t\t\t\t\t\t\tsetPlalistInfo(prevInfo => ({\n\t\t\t\t\t\t\t\t...prevInfo,\n\t\t\t\t\t\t\t\tcurrentPlayed: callback,\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t})\n\t\t\t\t\t} else if (action === 'newCurrentPlayed') {\n\t\t\t\t\t\tsetPlalistInfo(prevInfo => ({\n\t\t\t\t\t\t\t...prevInfo,\n\t\t\t\t\t\t\tcurrentPlayed: song,\n\t\t\t\t\t\t}))\n\t\t\t\t\t} else if (action === 'add') {\n\t\t\t\t\t\tsetPlalistInfo(prevInfo => ({\n\t\t\t\t\t\t\t...prevInfo,\n\t\t\t\t\t\t\tsongs: [...prevInfo.songs, song],\n\t\t\t\t\t\t}))\n\t\t\t\t\t} else if (action === 'remove') {\n\t\t\t\t\t\tconst remove = songs => {\n\t\t\t\t\t\t\tconst updatedSongs = [...songs]\n\n\t\t\t\t\t\t\tif (song !== -1) {\n\t\t\t\t\t\t\t\tupdatedSongs.splice(song, 1)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn updatedSongs\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetPlalistInfo(prevInfo => ({\n\t\t\t\t\t\t\t...prevInfo,\n\t\t\t\t\t\t\tsongs: remove(prevInfo.songs),\n\t\t\t\t\t\t}))\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log('Error fetching data:', error)\n\t\t\t}\n\t\t}\n\n\t\tfetchData()\n\t\treturn () => {\n\t\t\tsocket?.off('updatePlaylist')\n\t\t\tsocket?.off('updatePlayed')\n\t\t\tsocket?.close()\n\t\t}\n\t}, [])\n\treturn [playedStatus, plalistInfo]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}