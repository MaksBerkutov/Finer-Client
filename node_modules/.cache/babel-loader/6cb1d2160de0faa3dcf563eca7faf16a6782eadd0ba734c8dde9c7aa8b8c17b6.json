{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nexport const useUpdatePlaylist = socket => {\n  _s();\n  const [plalistInfo, setPlalistInfo] = useState({\n    songs: [],\n    currentPlayed: -1\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        socket.emit('getAllInfo');\n        socket.on('updatePlaylist', ({\n          action,\n          song\n        }) => {\n          if (song === undefined) return;\n          if (action === 'allItems') {\n            setPlalistInfo({\n              ...plalistInfo,\n              songs: song\n            });\n            socket.emit('getCurrentPlayed', callback => {\n              setPlalistInfo({\n                ...plalistInfo,\n                currentPlayed: callback\n              });\n            });\n          } else if (action === 'newCurrentPlayed') {\n            setPlalistInfo({\n              ...plalistInfo,\n              currentPlayed: song\n            });\n          } else if (action === 'add') {\n            setPlalistInfo({\n              ...plalistInfo,\n              songs: [...plalistInfo.songs, song]\n            });\n          } else if (action === 'remove') {\n            const remove = songs => {\n              const updatedSongs = [...songs];\n              if (song !== -1) {\n                updatedSongs.splice(song, 1);\n              }\n              return updatedSongs;\n            };\n            setPlalistInfo({\n              ...plalistInfo,\n              songs: remove(plalistInfo.songs)\n            });\n          }\n        });\n      } catch (error) {\n        console.log('Error fetching data:', error);\n      }\n    };\n    fetchData();\n    return () => {\n      socket.off('updatePlaylist');\n    };\n  }, [plalistInfo, socket]);\n  return plalistInfo;\n};\n_s(useUpdatePlaylist, \"OomTctdFFVP3JXedvu8fRQLY4lA=\");","map":{"version":3,"names":["useEffect","useState","useUpdatePlaylist","socket","_s","plalistInfo","setPlalistInfo","songs","currentPlayed","fetchData","emit","on","action","song","undefined","callback","remove","updatedSongs","splice","error","console","log","off"],"sources":["/home/maksb/Загрузки/170km/frontend/src/components/Pages/MusicPage/hooks/useUpdatePlaylist.js"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nexport const useUpdatePlaylist = socket => {\n\tconst [plalistInfo, setPlalistInfo] = useState({\n\t\tsongs: [],\n\t\tcurrentPlayed: -1,\n\t})\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tsocket.emit('getAllInfo')\n\t\t\t\tsocket.on('updatePlaylist', ({ action, song }) => {\n\t\t\t\t\tif (song === undefined) return\n\t\t\t\t\tif (action === 'allItems') {\n\t\t\t\t\t\tsetPlalistInfo({\n\t\t\t\t\t\t\t...plalistInfo,\n\t\t\t\t\t\t\tsongs: song,\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tsocket.emit('getCurrentPlayed', callback => {\n\t\t\t\t\t\t\tsetPlalistInfo({\n\t\t\t\t\t\t\t\t...plalistInfo,\n\t\t\t\t\t\t\t\tcurrentPlayed: callback,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t} else if (action === 'newCurrentPlayed') {\n\t\t\t\t\t\tsetPlalistInfo({\n\t\t\t\t\t\t\t...plalistInfo,\n\t\t\t\t\t\t\tcurrentPlayed: song,\n\t\t\t\t\t\t})\n\t\t\t\t\t} else if (action === 'add') {\n\t\t\t\t\t\tsetPlalistInfo({\n\t\t\t\t\t\t\t...plalistInfo,\n\t\t\t\t\t\t\tsongs: [...plalistInfo.songs, song],\n\t\t\t\t\t\t})\n\t\t\t\t\t} else if (action === 'remove') {\n\t\t\t\t\t\tconst remove = songs => {\n\t\t\t\t\t\t\tconst updatedSongs = [...songs]\n\n\t\t\t\t\t\t\tif (song !== -1) {\n\t\t\t\t\t\t\t\tupdatedSongs.splice(song, 1)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn updatedSongs\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetPlalistInfo({\n\t\t\t\t\t\t\t...plalistInfo,\n\t\t\t\t\t\t\tsongs: remove(plalistInfo.songs),\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log('Error fetching data:', error)\n\t\t\t}\n\t\t}\n\n\t\tfetchData()\n\t\treturn () => {\n\t\t\tsocket.off('updatePlaylist')\n\t\t}\n\t}, [plalistInfo, socket])\n\treturn plalistInfo\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAO,MAAMC,iBAAiB,GAAGC,MAAM,IAAI;EAAAC,EAAA;EAC1C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC;IAC9CM,KAAK,EAAE,EAAE;IACTC,aAAa,EAAE,CAAC;EACjB,CAAC,CAAC;EACFR,SAAS,CAAC,MAAM;IACf,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACHN,MAAM,CAACO,IAAI,CAAC,YAAY,CAAC;QACzBP,MAAM,CAACQ,EAAE,CAAC,gBAAgB,EAAE,CAAC;UAAEC,MAAM;UAAEC;QAAK,CAAC,KAAK;UACjD,IAAIA,IAAI,KAAKC,SAAS,EAAE;UACxB,IAAIF,MAAM,KAAK,UAAU,EAAE;YAC1BN,cAAc,CAAC;cACd,GAAGD,WAAW;cACdE,KAAK,EAAEM;YACR,CAAC,CAAC;YAEFV,MAAM,CAACO,IAAI,CAAC,kBAAkB,EAAEK,QAAQ,IAAI;cAC3CT,cAAc,CAAC;gBACd,GAAGD,WAAW;gBACdG,aAAa,EAAEO;cAChB,CAAC,CAAC;YACH,CAAC,CAAC;UACH,CAAC,MAAM,IAAIH,MAAM,KAAK,kBAAkB,EAAE;YACzCN,cAAc,CAAC;cACd,GAAGD,WAAW;cACdG,aAAa,EAAEK;YAChB,CAAC,CAAC;UACH,CAAC,MAAM,IAAID,MAAM,KAAK,KAAK,EAAE;YAC5BN,cAAc,CAAC;cACd,GAAGD,WAAW;cACdE,KAAK,EAAE,CAAC,GAAGF,WAAW,CAACE,KAAK,EAAEM,IAAI;YACnC,CAAC,CAAC;UACH,CAAC,MAAM,IAAID,MAAM,KAAK,QAAQ,EAAE;YAC/B,MAAMI,MAAM,GAAGT,KAAK,IAAI;cACvB,MAAMU,YAAY,GAAG,CAAC,GAAGV,KAAK,CAAC;cAE/B,IAAIM,IAAI,KAAK,CAAC,CAAC,EAAE;gBAChBI,YAAY,CAACC,MAAM,CAACL,IAAI,EAAE,CAAC,CAAC;cAC7B;cAEA,OAAOI,YAAY;YACpB,CAAC;YACDX,cAAc,CAAC;cACd,GAAGD,WAAW;cACdE,KAAK,EAAES,MAAM,CAACX,WAAW,CAACE,KAAK;YAChC,CAAC,CAAC;UACH;QACD,CAAC,CAAC;MACH,CAAC,CAAC,OAAOY,KAAK,EAAE;QACfC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,KAAK,CAAC;MAC3C;IACD,CAAC;IAEDV,SAAS,CAAC,CAAC;IACX,OAAO,MAAM;MACZN,MAAM,CAACmB,GAAG,CAAC,gBAAgB,CAAC;IAC7B,CAAC;EACF,CAAC,EAAE,CAACjB,WAAW,EAAEF,MAAM,CAAC,CAAC;EACzB,OAAOE,WAAW;AACnB,CAAC;AAAAD,EAAA,CA5DYF,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}